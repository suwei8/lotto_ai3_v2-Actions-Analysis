name: Generate P5 YAML

on:
  workflow_dispatch:
    inputs:
      POSITION:
        description: "ÈÄâÊã©ÂÆö‰Ωç‰ΩçÔºàÂèØÈÄâÔºâ"
        required: false
        default: "all"
        type: choice
        options:
          - all
          - wanwei
          - qianwei
          - baiwei
          - shiwei
          - gewei

jobs:
  generate:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        position: ${{ fromJson('["wanwei","qianwei","baiwei","shiwei","gewei"]') }}

    env:
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      BACKUP_PASSWORD: ${{ secrets.BACKUP_PASSWORD }}
      PYTHONIOENCODING: utf-8

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Restore Database
        run: |
          mkdir -p data
          LATEST_JSON=$(curl -s https://api.github.com/repos/suwei8/lotto_ai3_v2-Backup_data/releases/latest)
          DOWNLOAD_URL=$(echo $LATEST_JSON | jq -r '.assets[] | select(.name | endswith("_backup.zip")) | .browser_download_url')
          wget -O data/lotto_backup.zip "$DOWNLOAD_URL"
          unzip -P "$BACKUP_PASSWORD" -o data/lotto_backup.zip -d data/
          gunzip -f data/*.sql.gz || true
          chmod +x scripts/restore_db.sh
          ./scripts/restore_db.sh

      - name: Run P5 YAML Generator
        run: |
          POSITION_INPUT=${{ github.event.inputs.POSITION }}
          if [[ "$POSITION_INPUT" == "all" || -z "$POSITION_INPUT" ]]; then
            POSITION_ARG=${{ matrix.position }}
          else
            POSITION_ARG=$POSITION_INPUT
          fi
          echo "Running: python scripts/generate_p5_yaml.py $POSITION_ARG"
          python scripts/generate_p5_yaml.py $POSITION_ARG

      - name: Commit & Push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add config/fixed/p5/
          git commit -m "ü§ñ Ëá™Âä®ÁîüÊàê P5 YAML" || echo "No changes"
          git push
