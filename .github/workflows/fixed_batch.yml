name: 定位杀号 - 多彩种批量

on:
  workflow_dispatch:
    inputs:
      LOTTERY:
        description: "选择彩票类型"
        required: true
        type: choice
        default: "3d"
        options:
          - 3d
          - p3
          - p5
      POSITION:
        description: "选择定位（默认全部）"
        required: false
        type: choice
        default: "all"
        options:
          - all
          - baiwei
          - shiwei
          - gewei
          - wanwei
          - qianwei
      CONFIG_FILE:
        description: "选择要单独执行的配置文件（可选）"
        required: false

      MODE:
        description: "执行模式"
        required: true
        type: choice
        default: "latest"
        options:
          - latest
          - fulltest

jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - id: set
        run: |
          # === 从 inputs 取值（仅 workflow_dispatch 时有值）
          LOTTERY="${{ github.event.inputs.LOTTERY }}"
          POSITION="${{ github.event.inputs.POSITION }}"

          # === 定时触发时 inputs 会是空，需要兜底 ===
          if [[ -z "$LOTTERY" ]]; then
            LOTTERY="3d"
          fi

          if [[ -z "$POSITION" ]]; then
            POSITION="all"
          fi

          echo "✅ 解析后 LOTTERY=$LOTTERY"
          echo "✅ 解析后 POSITION=$POSITION"

          # === 解析矩阵 ===
          if [[ "$POSITION" == "all" ]]; then
            if [[ "$LOTTERY" == "3d" || "$LOTTERY" == "p3" ]]; then
              POSITIONS='["baiwei","shiwei","gewei"]'
            elif [[ "$LOTTERY" == "p5" ]]; then
              POSITIONS='["wanwei","qianwei","baiwei","shiwei","gewei"]'
            else
              echo "❌ Unsupported LOTTERY: $LOTTERY"
              exit 1
            fi
          else
            POSITIONS="[\"$POSITION\"]"
          fi

          echo "matrix={\"lottery\":[\"$LOTTERY\"], \"position\":$POSITIONS}" >> $GITHUB_OUTPUT


  analyze:
    needs: set-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    env:
      PYTHONIOENCODING: "utf-8"
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      WECHAT_API_URL: ${{ secrets.WECHAT_API_URL }}
      WECHAT_API_KEY: ${{ secrets.WECHAT_API_KEY }}
      GITHUB_RUN_NUMBER: ${{ github.run_number }}
      BACKUP_PASSWORD: ${{ secrets.BACKUP_PASSWORD }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      CONFIG_FILE: ${{ github.event.inputs.CONFIG_FILE }}
      # ✅ 新增模式开关（这块就是可直接用的）
      # ✅ 模式开关（定稿版）
      MODE: ${{ github.event.inputs.MODE || 'latest' }}

      ENABLE_HIT_CHECK: ${{ github.event.inputs.MODE == 'fulltest' && 'True' || 'False' }}
      ENABLE_TRACK_OPEN_RANK: ${{ github.event.inputs.MODE == 'fulltest' && 'True' || 'False' }}
      LOG_SAVE_MODE: ${{ github.event.inputs.MODE == 'fulltest' && 'True' || 'False' }}
      ALL_MODE_LIMIT: ${{ github.event.inputs.MODE && github.event.inputs.MODE == 'fulltest' && 'None' || '1' }}
      QUERY_ISSUES: ${{ github.event.inputs.MODE == 'fulltest' && 'All' || 'None' }}


    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Debug Timezone Info
        run: |
          echo "==== 🕒 当前时间检查 ===="
          echo "✅ 当前 UTC 时间: $(date -u '+%Y-%m-%d %H:%M:%S')"
          echo "✅ 当前 北京时间: $(TZ='Asia/Shanghai' date '+%Y-%m-%d %H:%M:%S')"
          echo "========================"

      - name: 📦 动态获取最新数据库备份并还原（含进度显示）
        run: |
          echo "=============================="
          echo "🎯 开始执行最新数据库恢复任务"
          echo "⏱ 开始时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "=============================="
          START_TIME=$(date +%s)

          echo "📁 创建目录"
          mkdir -p data

          echo "🌐 通过 GitHub API 获取 latest release 信息"
          LATEST_JSON=$(curl -s https://api.github.com/repos/suwei8/lotto_ai3_v2-Backup_data/releases/latest)

          echo "🔍 解析下载链接"
          DOWNLOAD_URL=$(echo "$LATEST_JSON" | jq -r '.assets[] | select(.name | endswith("_backup.zip")) | .browser_download_url')

          if [[ -z "$DOWNLOAD_URL" ]]; then
            echo "❌ 未找到符合条件的备份 zip 文件"
            exit 1
          fi

          echo "✅ 最新下载链接: $DOWNLOAD_URL"
          wget -O data/lotto_backup.zip "$DOWNLOAD_URL"

          echo "🔓 解压 ZIP 文件"
          sudo apt-get update && sudo apt-get install -y unzip pv gzip
          unzip -P "$BACKUP_PASSWORD" -o data/lotto_backup.zip -d data/

          echo "🚀 恢复数据库（显示导入进度）"
          SQL_GZ_FILE=$(find data -name '*.sql.gz' | head -n 1)
          if [[ -z "$SQL_GZ_FILE" ]]; then
            echo "❌ 未找到 SQL 压缩文件 (*.sql.gz)"
            exit 1
          fi

          SQL_FILE_SIZE=$(gzip -l "$SQL_GZ_FILE" | awk 'NR==2 {print $2}')
          gunzip -c "$SQL_GZ_FILE" | pv -s $SQL_FILE_SIZE | mysql -h$MYSQL_HOST -P$MYSQL_PORT -u$MYSQL_USER -p$MYSQL_PASSWORD $MYSQL_DATABASE

          echo "🧹 清理中间文件"
          rm -rf data/*

          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "=============================="
          echo "✅ 恢复完成：耗时 ${DURATION} 秒（约 $((DURATION / 60)) 分钟）"
          echo "⏱ 结束时间: $(date '+%Y-%m-%d %H:%M:%S')"
          echo "=============================="

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set Python UTF-8 Encoding
        run: echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV

      - name: Run Fixed Batch
        run: python scripts/run_fixed_batch.py --lottery ${{ matrix.lottery }} --position ${{ matrix.position }}


