name: 定位杀号 - 多彩种批量

on:
  workflow_dispatch:
    inputs:
      LOTTERY:
        description: "选择彩票类型"
        required: true
        type: choice
        default: "3d"
        options:
          - 3d
          - p3
          - p5
      POSITION:
        description: "选择定位（默认全部）"
        required: false
        type: choice
        default: "all"
        options:
          - all
          - baiwei
          - shiwei
          - gewei
          - wanwei
          - qianwei
      CONFIG_FILE:
        description: "选择要单独执行的配置文件（可选）"
        required: false

      MODE:
        description: "执行模式"
        required: true
        type: choice
        default: "latest"
        options:
          - latest
          - fulltest

  schedule:
    - cron: "0 15 * * *"
    # UTC 时间 15:00 ➜ 北京时间 23:00
jobs:
  set-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set.outputs.matrix }}
    steps:
      - id: set
        run: |
          # === 从 inputs 取值（仅 workflow_dispatch 时有值）
          LOTTERY="${{ github.event.inputs.LOTTERY }}"
          POSITION="${{ github.event.inputs.POSITION }}"

          # === 定时触发时 inputs 会是空，需要兜底 ===
          if [[ -z "$LOTTERY" ]]; then
            LOTTERY="3d"
          fi

          if [[ -z "$POSITION" ]]; then
            POSITION="all"
          fi

          echo "✅ 解析后 LOTTERY=$LOTTERY"
          echo "✅ 解析后 POSITION=$POSITION"

          # === 解析矩阵 ===
          if [[ "$POSITION" == "all" ]]; then
            if [[ "$LOTTERY" == "3d" || "$LOTTERY" == "p3" ]]; then
              POSITIONS='["baiwei","shiwei","gewei"]'
            elif [[ "$LOTTERY" == "p5" ]]; then
              POSITIONS='["wanwei","qianwei","baiwei","shiwei","gewei"]'
            else
              echo "❌ Unsupported LOTTERY: $LOTTERY"
              exit 1
            fi
          else
            POSITIONS="[\"$POSITION\"]"
          fi

          echo "matrix={\"lottery\":[\"$LOTTERY\"], \"position\":$POSITIONS}" >> $GITHUB_OUTPUT


  analyze:
    needs: set-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.set-matrix.outputs.matrix) }}
    env:
      PYTHONIOENCODING: "utf-8"
      MYSQL_HOST: 127.0.0.1
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
      WECHAT_API_URL: ${{ secrets.WECHAT_API_URL }}
      WECHAT_API_KEY: ${{ secrets.WECHAT_API_KEY }}
      GITHUB_RUN_NUMBER: ${{ github.run_number }}
      BACKUP_PASSWORD: ${{ secrets.BACKUP_PASSWORD }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      CONFIG_FILE: ${{ github.event.inputs.CONFIG_FILE }}
      # ✅ 新增模式开关（这块就是可直接用的）
      # ✅ 模式开关（定稿版）
      MODE: ${{ github.event.inputs.MODE || 'latest' }}

      ENABLE_HIT_CHECK: ${{ github.event.inputs.MODE == 'fulltest' && 'True' || 'False' }}
      ENABLE_TRACK_OPEN_RANK: ${{ github.event.inputs.MODE == 'fulltest' && 'True' || 'False' }}
      LOG_SAVE_MODE: ${{ github.event.inputs.MODE == 'fulltest' && 'True' || 'False' }}
      ALL_MODE_LIMIT: ${{ github.event.inputs.MODE && github.event.inputs.MODE == 'fulltest' && 'None' || '1' }}
      QUERY_ISSUES: ${{ github.event.inputs.MODE == 'fulltest' && 'All' || 'None' }}


    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download latest database backup (auto)
        run: |
          mkdir -p data
          
          # Get latest release info
          LATEST_JSON=$(curl -s https://api.github.com/repos/suwei8/lotto_ai3_v2-Backup_data/releases/latest)
          
          # Parse URL
          # DOWNLOAD_URL="https://github.com/suwei8/lotto_ai3_v2-Backup_data/releases/download/test/lotto_ai3_v2-mini3d.zip"
          DOWNLOAD_URL=$(echo $LATEST_JSON | jq -r '.assets[] | select(.name | endswith("_backup.zip")) | .browser_download_url')
               
          echo "✅ Latest backup URL: $DOWNLOAD_URL"
          
          wget -O data/lotto_backup.zip "$DOWNLOAD_URL"
          sleep 1
          unzip -P "$BACKUP_PASSWORD" -o data/lotto_backup.zip -d data/
          ls -l data/

      - name: Decompress SQL gzip
        run: |
          gunzip -f data/*.sql.gz

      - name: Restore MySQL Database

        run: |
          chmod +x scripts/restore_db.sh
          ./scripts/restore_db.sh

      - name: Set Python UTF-8 Encoding
        run: echo "PYTHONIOENCODING=utf-8" >> $GITHUB_ENV

      - name: Run Fixed Batch
        run: python scripts/run_fixed_batch.py --lottery ${{ matrix.lottery }} --position ${{ matrix.position }}


